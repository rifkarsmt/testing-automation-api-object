{
  "stats": {
    "suites": 2,
    "tests": 10,
    "passes": 3,
    "pending": 0,
    "failures": 7,
    "start": "2024-08-15T13:04:02.386Z",
    "end": "2024-08-15T13:04:04.217Z",
    "duration": 1831,
    "testsRegistered": 10,
    "passPercent": 30,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5a88c6be-c234-403f-b67d-d762f56b7ddb",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3423acbb-26e3-40e9-aeea-315dbfb09583",
          "title": "List All Of Object",
          "fullFile": "D:\\PARI\\testing-automation-api-object\\api\\test\\menu-object-test\\get-list-object-test.js",
          "file": "\\api\\test\\menu-object-test\\get-list-object-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@get As a User, I want to be able to get List Of All Object - Testing With True endpoint",
              "fullTitle": "List All Of Object @get As a User, I want to be able to get List Of All Object - Testing With True endpoint",
              "timedOut": false,
              "duration": 750,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await page.getListAllObject();\n    console.log(response.body);\n    assert(response.status).to.equal(200);",
              "err": {},
              "uuid": "c365f127-44f9-4e72-ae1a-74f0d1859f20",
              "parentUUID": "3423acbb-26e3-40e9-aeea-315dbfb09583",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@get As a User, I should get error 404 when Invalid Route - Testing With True endpoint",
              "fullTitle": "List All Of Object @get As a User, I should get error 404 when Invalid Route - Testing With True endpoint",
              "timedOut": false,
              "duration": 254,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await page.getnotFound();\n    console.log(response.body);\n    assert(response.status).to.equal(404);",
              "err": {},
              "uuid": "c0f46178-6a3d-4089-80cc-7e7936b5f643",
              "parentUUID": "3423acbb-26e3-40e9-aeea-315dbfb09583",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@get As a User, I should get error 408 when the request times out - Testing Request Timeout",
              "fullTitle": "List All Of Object @get As a User, I should get error 408 when the request times out - Testing Request Timeout",
              "timedOut": false,
              "duration": 560,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await page.getListAllObject({\n    timeout: 100 // Simulate a request timeout\n});\nconsole.log(response.body);\nassert(response.status).to.equal(408);",
              "err": {
                "message": "AssertionError: expected 200 to equal 408",
                "estack": "AssertionError: expected 200 to equal 408\n    at Context.<anonymous> (api\\test\\menu-object-test\\get-list-object-test.js:34:36)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 200\n+ 408\n"
              },
              "uuid": "8ff4d541-9620-4454-a558-5d081d502260",
              "parentUUID": "3423acbb-26e3-40e9-aeea-315dbfb09583",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c365f127-44f9-4e72-ae1a-74f0d1859f20",
            "c0f46178-6a3d-4089-80cc-7e7936b5f643"
          ],
          "failures": [
            "8ff4d541-9620-4454-a558-5d081d502260"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1564,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "ebd65f85-af0a-4b3f-ad72-0b9e0ee5900e",
          "title": "Search By ID",
          "fullFile": "D:\\PARI\\testing-automation-api-object\\api\\test\\menu-object-test\\search-by-id-test.js",
          "file": "\\api\\test\\menu-object-test\\search-by-id-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@get As a User, I want to be able to get List Of All Object - Testing with multiple data IDs",
              "fullTitle": "Search By ID @get As a User, I want to be able to get List Of All Object - Testing with multiple data IDs",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const ids = ['3', '5', '10']; \nfor (const id of ids) {\n    const response = await page.getObjectById(id);\n    assert(response.status).to.equal(200);\n    }",
              "err": {
                "message": "TypeError: The \"urlObject\" argument must be one of type object or string. Received undefined",
                "estack": "TypeError [ERR_INVALID_ARG_TYPE]: The \"urlObject\" argument must be one of type object or string. Received undefined\n    at urlFormat (node:url:580:11)\n    at Test.Request (node_modules\\superagent\\lib\\node\\index.js:137:37)\n    at new Test (node_modules\\supertest\\lib\\test.js:29:11)\n    at obj.<computed> [as get] (node_modules\\supertest\\index.js:25:14)\n    at Object.getObjectById (api\\page\\menu-object-page\\search-by-id-page.js:19:27)\n    at Context.<anonymous> (api\\test\\menu-object-test\\search-by-id-test.js:21:41)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "7e2359ba-8abb-4502-ade8-14b60c1d7fa2",
              "parentUUID": "ebd65f85-af0a-4b3f-ad72-0b9e0ee5900e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@get As a User, I want to be able to get List Of All Object - Testing With ID = 3",
              "fullTitle": "Search By ID @get As a User, I want to be able to get List Of All Object - Testing With ID = 3",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const id = 3;   \nconst response = await page.getObjectById(id);\nconsole.log(response.body);\nassert(response.status).to.equal(200);",
              "err": {
                "message": "TypeError: The \"urlObject\" argument must be one of type object or string. Received undefined",
                "estack": "TypeError [ERR_INVALID_ARG_TYPE]: The \"urlObject\" argument must be one of type object or string. Received undefined\n    at urlFormat (node:url:580:11)\n    at Test.Request (node_modules\\superagent\\lib\\node\\index.js:137:37)\n    at new Test (node_modules\\supertest\\lib\\test.js:29:11)\n    at obj.<computed> [as get] (node_modules\\supertest\\index.js:25:14)\n    at Object.getObjectById (api\\page\\menu-object-page\\search-by-id-page.js:19:27)\n    at Context.<anonymous> (api\\test\\menu-object-test\\search-by-id-test.js:28:37)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "d2828050-1336-47f4-ae94-84e831960d97",
              "parentUUID": "ebd65f85-af0a-4b3f-ad72-0b9e0ee5900e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@get As a User, I want to be able to get List Of All Object - Testing With ID = 5",
              "fullTitle": "Search By ID @get As a User, I want to be able to get List Of All Object - Testing With ID = 5",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const id = '5';   \nconst response = await page.getObjectById(id);\nconsole.log(response.body);\nassert(response.status).to.equal(200);",
              "err": {
                "message": "TypeError: The \"urlObject\" argument must be one of type object or string. Received undefined",
                "estack": "TypeError [ERR_INVALID_ARG_TYPE]: The \"urlObject\" argument must be one of type object or string. Received undefined\n    at urlFormat (node:url:580:11)\n    at Test.Request (node_modules\\superagent\\lib\\node\\index.js:137:37)\n    at new Test (node_modules\\supertest\\lib\\test.js:29:11)\n    at obj.<computed> [as get] (node_modules\\supertest\\index.js:25:14)\n    at Object.getObjectById (api\\page\\menu-object-page\\search-by-id-page.js:19:27)\n    at Context.<anonymous> (api\\test\\menu-object-test\\search-by-id-test.js:35:37)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "e2b948d7-aa91-4765-95b8-6b9c2a2238ce",
              "parentUUID": "ebd65f85-af0a-4b3f-ad72-0b9e0ee5900e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@get As a User, I want to be able to get List Of All Object - Testing With ID = 10",
              "fullTitle": "Search By ID @get As a User, I want to be able to get List Of All Object - Testing With ID = 10",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const id = '10' ;    \nconst response = await page.getObjectById(id);\nconsole.log(response.body);\nassert(response.status).to.equal(200);",
              "err": {
                "message": "TypeError: The \"urlObject\" argument must be one of type object or string. Received undefined",
                "estack": "TypeError [ERR_INVALID_ARG_TYPE]: The \"urlObject\" argument must be one of type object or string. Received undefined\n    at urlFormat (node:url:580:11)\n    at Test.Request (node_modules\\superagent\\lib\\node\\index.js:137:37)\n    at new Test (node_modules\\supertest\\lib\\test.js:29:11)\n    at obj.<computed> [as get] (node_modules\\supertest\\index.js:25:14)\n    at Object.getObjectById (api\\page\\menu-object-page\\search-by-id-page.js:19:27)\n    at Context.<anonymous> (api\\test\\menu-object-test\\search-by-id-test.js:42:37)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "c1cff4cb-c04c-4fab-a6cc-5b71db9ac568",
              "parentUUID": "ebd65f85-af0a-4b3f-ad72-0b9e0ee5900e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@get As a User, I should get error 400 when Invalid Data Parameter - Testing With ID using boolean",
              "fullTitle": "Search By ID @get As a User, I should get error 400 when Invalid Data Parameter - Testing With ID using boolean",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const id = true; // harusnya kena 400 tapi ini masih passing ke 200 \nconst response = await page.getObjectById(id);\nconsole.log(response.body);\nassert(response.status).to.equal(400);",
              "err": {
                "message": "TypeError: The \"urlObject\" argument must be one of type object or string. Received undefined",
                "estack": "TypeError [ERR_INVALID_ARG_TYPE]: The \"urlObject\" argument must be one of type object or string. Received undefined\n    at urlFormat (node:url:580:11)\n    at Test.Request (node_modules\\superagent\\lib\\node\\index.js:137:37)\n    at new Test (node_modules\\supertest\\lib\\test.js:29:11)\n    at obj.<computed> [as get] (node_modules\\supertest\\index.js:25:14)\n    at Object.getObjectById (api\\page\\menu-object-page\\search-by-id-page.js:19:27)\n    at Context.<anonymous> (api\\test\\menu-object-test\\search-by-id-test.js:49:37)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "56356d27-5518-4252-a24d-e18776280726",
              "parentUUID": "ebd65f85-af0a-4b3f-ad72-0b9e0ee5900e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@get As a User, I should get error 404 when Invalid Route - Testing with Invalid Route",
              "fullTitle": "Search By ID @get As a User, I should get error 404 when Invalid Route - Testing with Invalid Route",
              "timedOut": false,
              "duration": 178,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await page.getnotFound();\n    console.log(response.body);\n    assert(response.status).to.equal(404);",
              "err": {},
              "uuid": "965e86fc-70fe-4346-bb32-4565d1a3d5fa",
              "parentUUID": "ebd65f85-af0a-4b3f-ad72-0b9e0ee5900e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@get As a User, I should get error 408 when the request times out - Testing Request Timeout",
              "fullTitle": "Search By ID @get As a User, I should get error 408 when the request times out - Testing Request Timeout",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await page.getRequestTimeout({\n    timeout: 100 // Simulate a request timeout\n});\nconsole.log(response.body);\nassert(response.status).to.equal(408);",
              "err": {
                "message": "TypeError: page.getRequestTimeout is not a function",
                "estack": "TypeError: page.getRequestTimeout is not a function\n    at Context.<anonymous> (api\\test\\menu-object-test\\search-by-id-test.js:61:37)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "ad4860e1-8a1e-4455-8ab6-51cc33e8d072",
              "parentUUID": "ebd65f85-af0a-4b3f-ad72-0b9e0ee5900e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "965e86fc-70fe-4346-bb32-4565d1a3d5fa"
          ],
          "failures": [
            "7e2359ba-8abb-4502-ade8-14b60c1d7fa2",
            "d2828050-1336-47f4-ae94-84e831960d97",
            "e2b948d7-aa91-4765-95b8-6b9c2a2238ce",
            "c1cff4cb-c04c-4fab-a6cc-5b71db9ac568",
            "56356d27-5518-4252-a24d-e18776280726",
            "ad4860e1-8a1e-4455-8ab6-51cc33e8d072"
          ],
          "pending": [],
          "skipped": [],
          "duration": 185,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 180000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report-[datetime]",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mochawesome/",
        "reportFilename": "report-[datetime]",
        "overwrite": "false"
      },
      "version": "6.2.0"
    }
  }
}