{
  "stats": {
    "suites": 2,
    "tests": 10,
    "passes": 3,
    "pending": 0,
    "failures": 7,
    "start": "2024-08-15T13:02:25.811Z",
    "end": "2024-08-15T13:02:26.940Z",
    "duration": 1129,
    "testsRegistered": 10,
    "passPercent": 30,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "dc56d802-aec3-4adf-bff5-323513130232",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a0fe58df-f30a-46c0-8590-21dd5d24c974",
          "title": "List All Of Object",
          "fullFile": "D:\\PARI\\testing-automation-api-object\\api\\test\\menu-object-test\\get-list-object-test.js",
          "file": "\\api\\test\\menu-object-test\\get-list-object-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@get As a User, I want to be able to get List Of All Object - Testing With True endpoint",
              "fullTitle": "List All Of Object @get As a User, I want to be able to get List Of All Object - Testing With True endpoint",
              "timedOut": false,
              "duration": 384,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await page.getListAllObject();\n    console.log(response.body);\n    assert(response.status).to.equal(200);",
              "err": {},
              "uuid": "70ac6c85-0b32-4168-afb0-c0ef8668d94e",
              "parentUUID": "a0fe58df-f30a-46c0-8590-21dd5d24c974",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@get As a User, I should get error 404 when Invalid Route - Testing With True endpoint",
              "fullTitle": "List All Of Object @get As a User, I should get error 404 when Invalid Route - Testing With True endpoint",
              "timedOut": false,
              "duration": 219,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await page.getnotFound();\n    console.log(response.body);\n    assert(response.status).to.equal(404);",
              "err": {},
              "uuid": "37dea3f2-ce55-4264-9fe5-4371b902b06d",
              "parentUUID": "a0fe58df-f30a-46c0-8590-21dd5d24c974",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@get As a User, I should get error 408 when the request times out - Testing Request Timeout",
              "fullTitle": "List All Of Object @get As a User, I should get error 408 when the request times out - Testing Request Timeout",
              "timedOut": false,
              "duration": 313,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await page.getListAllObject({\n    timeout: 100 // Simulate a request timeout\n});\nconsole.log(response.body);\nassert(response.status).to.equal(408);",
              "err": {
                "message": "AssertionError: expected 200 to equal 408",
                "estack": "AssertionError: expected 200 to equal 408\n    at Context.<anonymous> (api\\test\\menu-object-test\\get-list-object-test.js:34:36)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 200\n+ 408\n"
              },
              "uuid": "794a9acc-3f07-41ad-b370-afb6b88eab9a",
              "parentUUID": "a0fe58df-f30a-46c0-8590-21dd5d24c974",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "70ac6c85-0b32-4168-afb0-c0ef8668d94e",
            "37dea3f2-ce55-4264-9fe5-4371b902b06d"
          ],
          "failures": [
            "794a9acc-3f07-41ad-b370-afb6b88eab9a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 916,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        },
        {
          "uuid": "5df06eca-2646-4ff7-9d08-0ea6a493fedf",
          "title": "Search By ID",
          "fullFile": "D:\\PARI\\testing-automation-api-object\\api\\test\\menu-object-test\\search-by-id-test.js",
          "file": "\\api\\test\\menu-object-test\\search-by-id-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@get As a User, I want to be able to get List Of All Object - Testing with multiple data IDs",
              "fullTitle": "Search By ID @get As a User, I want to be able to get List Of All Object - Testing with multiple data IDs",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const ids = ['3', '5', '10']; \nfor (const id of ids) {\n    const response = await page.getObjectById(id);\n    assert(response.status).to.equal(200);\n    }",
              "err": {
                "message": "TypeError: The \"urlObject\" argument must be one of type object or string. Received undefined",
                "estack": "TypeError [ERR_INVALID_ARG_TYPE]: The \"urlObject\" argument must be one of type object or string. Received undefined\n    at urlFormat (node:url:580:11)\n    at Test.Request (node_modules\\superagent\\lib\\node\\index.js:137:37)\n    at new Test (node_modules\\supertest\\lib\\test.js:29:11)\n    at obj.<computed> [as get] (node_modules\\supertest\\index.js:25:14)\n    at Object.getObjectById (api\\page\\menu-object-page\\search-by-id-page.js:19:27)\n    at Context.<anonymous> (api\\test\\menu-object-test\\search-by-id-test.js:21:41)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "15403d84-1655-438d-8e00-1643f2531d68",
              "parentUUID": "5df06eca-2646-4ff7-9d08-0ea6a493fedf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@get As a User, I want to be able to get List Of All Object - Testing With ID = 3",
              "fullTitle": "Search By ID @get As a User, I want to be able to get List Of All Object - Testing With ID = 3",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const id = 3;   \nconst response = await page.getObjectById(id);\nconsole.log(response.body);\nassert(response.status).to.equal(200);",
              "err": {
                "message": "TypeError: The \"urlObject\" argument must be one of type object or string. Received undefined",
                "estack": "TypeError [ERR_INVALID_ARG_TYPE]: The \"urlObject\" argument must be one of type object or string. Received undefined\n    at urlFormat (node:url:580:11)\n    at Test.Request (node_modules\\superagent\\lib\\node\\index.js:137:37)\n    at new Test (node_modules\\supertest\\lib\\test.js:29:11)\n    at obj.<computed> [as get] (node_modules\\supertest\\index.js:25:14)\n    at Object.getObjectById (api\\page\\menu-object-page\\search-by-id-page.js:19:27)\n    at Context.<anonymous> (api\\test\\menu-object-test\\search-by-id-test.js:28:37)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "969d7fea-75c1-444a-b2a5-695d41e4a7a8",
              "parentUUID": "5df06eca-2646-4ff7-9d08-0ea6a493fedf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@get As a User, I want to be able to get List Of All Object - Testing With ID = 5",
              "fullTitle": "Search By ID @get As a User, I want to be able to get List Of All Object - Testing With ID = 5",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const id = '5';   \nconst response = await page.getObjectById(id);\nconsole.log(response.body);\nassert(response.status).to.equal(200);",
              "err": {
                "message": "TypeError: The \"urlObject\" argument must be one of type object or string. Received undefined",
                "estack": "TypeError [ERR_INVALID_ARG_TYPE]: The \"urlObject\" argument must be one of type object or string. Received undefined\n    at urlFormat (node:url:580:11)\n    at Test.Request (node_modules\\superagent\\lib\\node\\index.js:137:37)\n    at new Test (node_modules\\supertest\\lib\\test.js:29:11)\n    at obj.<computed> [as get] (node_modules\\supertest\\index.js:25:14)\n    at Object.getObjectById (api\\page\\menu-object-page\\search-by-id-page.js:19:27)\n    at Context.<anonymous> (api\\test\\menu-object-test\\search-by-id-test.js:35:37)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "4b85212f-a1d5-43a8-b3f8-18eb9edbc281",
              "parentUUID": "5df06eca-2646-4ff7-9d08-0ea6a493fedf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@get As a User, I want to be able to get List Of All Object - Testing With ID = 10",
              "fullTitle": "Search By ID @get As a User, I want to be able to get List Of All Object - Testing With ID = 10",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const id = '10' ;    \nconst response = await page.getObjectById(id);\nconsole.log(response.body);\nassert(response.status).to.equal(200);",
              "err": {
                "message": "TypeError: The \"urlObject\" argument must be one of type object or string. Received undefined",
                "estack": "TypeError [ERR_INVALID_ARG_TYPE]: The \"urlObject\" argument must be one of type object or string. Received undefined\n    at urlFormat (node:url:580:11)\n    at Test.Request (node_modules\\superagent\\lib\\node\\index.js:137:37)\n    at new Test (node_modules\\supertest\\lib\\test.js:29:11)\n    at obj.<computed> [as get] (node_modules\\supertest\\index.js:25:14)\n    at Object.getObjectById (api\\page\\menu-object-page\\search-by-id-page.js:19:27)\n    at Context.<anonymous> (api\\test\\menu-object-test\\search-by-id-test.js:42:37)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "7b7628a6-a900-4885-950b-2460eccdcd3e",
              "parentUUID": "5df06eca-2646-4ff7-9d08-0ea6a493fedf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@get As a User, I should get error 400 when Invalid Data Parameter - Testing With ID using boolean",
              "fullTitle": "Search By ID @get As a User, I should get error 400 when Invalid Data Parameter - Testing With ID using boolean",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const id = true; // harusnya kena 400 tapi ini masih passing ke 200 \nconst response = await page.getObjectById(id);\nconsole.log(response.body);\nassert(response.status).to.equal(400);",
              "err": {
                "message": "TypeError: The \"urlObject\" argument must be one of type object or string. Received undefined",
                "estack": "TypeError [ERR_INVALID_ARG_TYPE]: The \"urlObject\" argument must be one of type object or string. Received undefined\n    at urlFormat (node:url:580:11)\n    at Test.Request (node_modules\\superagent\\lib\\node\\index.js:137:37)\n    at new Test (node_modules\\supertest\\lib\\test.js:29:11)\n    at obj.<computed> [as get] (node_modules\\supertest\\index.js:25:14)\n    at Object.getObjectById (api\\page\\menu-object-page\\search-by-id-page.js:19:27)\n    at Context.<anonymous> (api\\test\\menu-object-test\\search-by-id-test.js:49:37)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "72bee671-380c-4740-8380-23e8bfa1fd87",
              "parentUUID": "5df06eca-2646-4ff7-9d08-0ea6a493fedf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@get As a User, I should get error 404 when Invalid Route - Testing with Invalid Route",
              "fullTitle": "Search By ID @get As a User, I should get error 404 when Invalid Route - Testing with Invalid Route",
              "timedOut": false,
              "duration": 154,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await page.getnotFound();\n    console.log(response.body);\n    assert(response.status).to.equal(404);",
              "err": {},
              "uuid": "83ac53fc-5434-4cfa-af1e-6bf4fd47cac6",
              "parentUUID": "5df06eca-2646-4ff7-9d08-0ea6a493fedf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@get As a User, I should get error 408 when the request times out - Testing Request Timeout",
              "fullTitle": "Search By ID @get As a User, I should get error 408 when the request times out - Testing Request Timeout",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await page.getRequestTimeout({\n    timeout: 100 // Simulate a request timeout\n});\nconsole.log(response.body);\nassert(response.status).to.equal(408);",
              "err": {
                "message": "TypeError: page.getRequestTimeout is not a function",
                "estack": "TypeError: page.getRequestTimeout is not a function\n    at Context.<anonymous> (api\\test\\menu-object-test\\search-by-id-test.js:61:37)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "ee14e286-5dc0-4b5b-b83f-4305bccf3d95",
              "parentUUID": "5df06eca-2646-4ff7-9d08-0ea6a493fedf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "83ac53fc-5434-4cfa-af1e-6bf4fd47cac6"
          ],
          "failures": [
            "15403d84-1655-438d-8e00-1643f2531d68",
            "969d7fea-75c1-444a-b2a5-695d41e4a7a8",
            "4b85212f-a1d5-43a8-b3f8-18eb9edbc281",
            "7b7628a6-a900-4885-950b-2460eccdcd3e",
            "72bee671-380c-4740-8380-23e8bfa1fd87",
            "ee14e286-5dc0-4b5b-b83f-4305bccf3d95"
          ],
          "pending": [],
          "skipped": [],
          "duration": 160,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 180000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report-[datetime]",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mochawesome/",
        "reportFilename": "report-[datetime]",
        "overwrite": "false"
      },
      "version": "6.2.0"
    }
  }
}